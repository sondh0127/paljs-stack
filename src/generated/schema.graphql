### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AggregateComment {
  avg: CommentAvgAggregateOutputType
  count: Int!
  max: CommentMaxAggregateOutputType
  min: CommentMinAggregateOutputType
  sum: CommentSumAggregateOutputType
}

type AggregateGroup {
  avg: GroupAvgAggregateOutputType
  count: Int!
  max: GroupMaxAggregateOutputType
  min: GroupMinAggregateOutputType
  sum: GroupSumAggregateOutputType
}

type AggregatePost {
  avg: PostAvgAggregateOutputType
  count: Int!
  max: PostMaxAggregateOutputType
  min: PostMinAggregateOutputType
  sum: PostSumAggregateOutputType
}

type AggregateProject {
  avg: ProjectAvgAggregateOutputType
  count: Int!
  max: ProjectMaxAggregateOutputType
  min: ProjectMinAggregateOutputType
  sum: ProjectSumAggregateOutputType
}

type AggregateUser {
  avg: UserAvgAggregateOutputType
  count: Int!
  max: UserMaxAggregateOutputType
  min: UserMinAggregateOutputType
  sum: UserSumAggregateOutputType
}

type BatchPayload {
  count: Int!
}

input BoolFieldUpdateOperationsInput {
  set: Boolean
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

type Comment {
  author: User
  authorId: Int
  contain: String!
  createdAt: DateTime!
  id: Int!
  post: Post!
  postId: Int!
  updatedAt: DateTime!
}

type CommentAvgAggregateOutputType {
  authorId: Float
  id: Float!
  postId: Float!
}

input CommentCreateInput {
  author: UserCreateOneWithoutCommentsInput
  contain: String!
  createdAt: DateTime
  post: PostCreateOneWithoutCommentsInput!
  updatedAt: DateTime
}

input CommentCreateManyWithoutAuthorInput {
  connect: [CommentWhereUniqueInput]
  create: [CommentCreateWithoutAuthorInput]
}

input CommentCreateManyWithoutPostInput {
  connect: [CommentWhereUniqueInput]
  create: [CommentCreateWithoutPostInput]
}

input CommentCreateWithoutAuthorInput {
  contain: String!
  createdAt: DateTime
  post: PostCreateOneWithoutCommentsInput!
  updatedAt: DateTime
}

input CommentCreateWithoutPostInput {
  author: UserCreateOneWithoutCommentsInput
  contain: String!
  createdAt: DateTime
  updatedAt: DateTime
}

enum CommentDistinctFieldEnum {
  authorId
  contain
  createdAt
  id
  postId
  updatedAt
}

input CommentListRelationFilter {
  every: CommentWhereInput
  none: CommentWhereInput
  some: CommentWhereInput
}

type CommentMaxAggregateOutputType {
  authorId: Int
  id: Int!
  postId: Int!
}

type CommentMinAggregateOutputType {
  authorId: Int
  id: Int!
  postId: Int!
}

input CommentOrderByInput {
  authorId: SortOrder
  contain: SortOrder
  createdAt: SortOrder
  id: SortOrder
  postId: SortOrder
  updatedAt: SortOrder
}

input CommentScalarWhereInput {
  AND: [CommentScalarWhereInput]
  authorId: IntNullableFilter
  contain: StringFilter
  createdAt: DateTimeFilter
  id: IntFilter
  NOT: [CommentScalarWhereInput]
  OR: [CommentScalarWhereInput]
  postId: IntFilter
  updatedAt: DateTimeFilter
}

type CommentSumAggregateOutputType {
  authorId: Int
  id: Int!
  postId: Int!
}

input CommentUpdateInput {
  author: UserUpdateOneWithoutCommentsInput
  contain: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  post: PostUpdateOneRequiredWithoutCommentsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CommentUpdateManyDataInput {
  contain: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CommentUpdateManyMutationInput {
  contain: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CommentUpdateManyWithoutAuthorInput {
  connect: [CommentWhereUniqueInput]
  create: [CommentCreateWithoutAuthorInput]
  delete: [CommentWhereUniqueInput]
  deleteMany: [CommentScalarWhereInput]
  disconnect: [CommentWhereUniqueInput]
  set: [CommentWhereUniqueInput]
  update: [CommentUpdateWithWhereUniqueWithoutAuthorInput]
  updateMany: [CommentUpdateManyWithWhereNestedInput]
  upsert: [CommentUpsertWithWhereUniqueWithoutAuthorInput]
}

input CommentUpdateManyWithoutPostInput {
  connect: [CommentWhereUniqueInput]
  create: [CommentCreateWithoutPostInput]
  delete: [CommentWhereUniqueInput]
  deleteMany: [CommentScalarWhereInput]
  disconnect: [CommentWhereUniqueInput]
  set: [CommentWhereUniqueInput]
  update: [CommentUpdateWithWhereUniqueWithoutPostInput]
  updateMany: [CommentUpdateManyWithWhereNestedInput]
  upsert: [CommentUpsertWithWhereUniqueWithoutPostInput]
}

input CommentUpdateManyWithWhereNestedInput {
  data: CommentUpdateManyDataInput!
  where: CommentScalarWhereInput!
}

input CommentUpdateWithoutAuthorDataInput {
  contain: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  post: PostUpdateOneRequiredWithoutCommentsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CommentUpdateWithoutPostDataInput {
  author: UserUpdateOneWithoutCommentsInput
  contain: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CommentUpdateWithWhereUniqueWithoutAuthorInput {
  data: CommentUpdateWithoutAuthorDataInput!
  where: CommentWhereUniqueInput!
}

input CommentUpdateWithWhereUniqueWithoutPostInput {
  data: CommentUpdateWithoutPostDataInput!
  where: CommentWhereUniqueInput!
}

input CommentUpsertWithWhereUniqueWithoutAuthorInput {
  create: CommentCreateWithoutAuthorInput!
  update: CommentUpdateWithoutAuthorDataInput!
  where: CommentWhereUniqueInput!
}

input CommentUpsertWithWhereUniqueWithoutPostInput {
  create: CommentCreateWithoutPostInput!
  update: CommentUpdateWithoutPostDataInput!
  where: CommentWhereUniqueInput!
}

input CommentWhereInput {
  AND: [CommentWhereInput]
  author: UserWhereInput
  authorId: IntNullableFilter
  contain: StringFilter
  createdAt: DateTimeFilter
  id: IntFilter
  NOT: [CommentWhereInput]
  OR: [CommentWhereInput]
  post: PostWhereInput
  postId: IntFilter
  updatedAt: DateTimeFilter
}

input CommentWhereUniqueInput {
  id: Int
}

"""Date custom scalar type"""
scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime]
}

type Enum {
  fields: [String]
  name: String
}

type Field {
  create: Boolean
  editor: Boolean
  filter: Boolean
  id: String
  isId: Boolean
  kind: KindEnum
  list: Boolean
  name: String
  order: Int
  read: Boolean
  relationField: Boolean
  required: Boolean
  sort: Boolean
  title: String
  type: String
  unique: Boolean
  update: Boolean
  upload: Boolean
}

type Group {
  createdAt: DateTime!
  id: Int!
  name: String!
  updatedAt: DateTime!
  users(cursor: UserWhereUniqueInput, distinct: UserDistinctFieldEnum, orderBy: UserOrderByInput, skip: Int, take: Int, where: UserWhereInput): [User!]!
}

type GroupAvgAggregateOutputType {
  id: Float!
}

input GroupCreateInput {
  createdAt: DateTime
  name: String!
  updatedAt: DateTime
  users: UserCreateManyWithoutGroupInput
}

input GroupCreateOneWithoutUsersInput {
  connect: GroupWhereUniqueInput
  create: GroupCreateWithoutUsersInput
}

input GroupCreateWithoutUsersInput {
  createdAt: DateTime
  name: String!
  updatedAt: DateTime
}

enum GroupDistinctFieldEnum {
  createdAt
  id
  name
  updatedAt
}

type GroupMaxAggregateOutputType {
  id: Int!
}

type GroupMinAggregateOutputType {
  id: Int!
}

input GroupOrderByInput {
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input GroupRelationFilter {
  is: GroupWhereInput
  isNot: GroupWhereInput
}

type GroupSumAggregateOutputType {
  id: Int!
}

input GroupUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  users: UserUpdateManyWithoutGroupInput
}

input GroupUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input GroupUpdateOneWithoutUsersInput {
  connect: GroupWhereUniqueInput
  create: GroupCreateWithoutUsersInput
  delete: Boolean
  disconnect: Boolean
  update: GroupUpdateWithoutUsersDataInput
  upsert: GroupUpsertWithoutUsersInput
}

input GroupUpdateWithoutUsersDataInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input GroupUpsertWithoutUsersInput {
  create: GroupCreateWithoutUsersInput!
  update: GroupUpdateWithoutUsersDataInput!
}

input GroupWhereInput {
  AND: [GroupWhereInput]
  createdAt: DateTimeFilter
  id: IntFilter
  name: StringFilter
  NOT: [GroupWhereInput]
  OR: [GroupWhereInput]
  updatedAt: DateTimeFilter
  users: UserListRelationFilter
}

input GroupWhereUniqueInput {
  id: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int]
}

"""Json custom scalar type"""
scalar Json

enum KindEnum {
  enum
  object
  scalar
}

type Model {
  create: Boolean
  delete: Boolean
  displayFields: [String]
  fields: [Field]
  id: String
  idField: String
  name: String
  update: Boolean
}

type Mutation {
  createOneComment(data: CommentCreateInput!): Comment!
  createOneGroup(data: GroupCreateInput!): Group!
  createOnePost(data: PostCreateInput!): Post!
  createOneProject(data: ProjectCreateInput!): Project!
  createOneUser(data: UserCreateInput!): User!
  deleteManyComment(where: CommentWhereInput): BatchPayload
  deleteManyGroup(where: GroupWhereInput): BatchPayload
  deleteManyPost(where: PostWhereInput): BatchPayload
  deleteManyProject(where: ProjectWhereInput): BatchPayload
  deleteManyUser(where: UserWhereInput): BatchPayload
  deleteOneComment(where: CommentWhereUniqueInput!): Comment
  deleteOneGroup(where: GroupWhereUniqueInput!): Group
  deleteOnePost(where: PostWhereUniqueInput!): Post
  deleteOneProject(where: ProjectWhereUniqueInput!): Project
  deleteOneUser(where: UserWhereUniqueInput!): User
  login(email: String!, password: String!): User
  logout: Boolean
  signup(email: String!, name: String, password: String!): User
  singleUpload(file: Upload!): UploadFile
  updateField(data: UpdateFieldInput, id: String!, modelId: String!): Field
  updateManyComment(data: CommentUpdateManyMutationInput!, where: CommentWhereInput): BatchPayload
  updateManyGroup(data: GroupUpdateManyMutationInput!, where: GroupWhereInput): BatchPayload
  updateManyPost(data: PostUpdateManyMutationInput!, where: PostWhereInput): BatchPayload
  updateManyProject(data: ProjectUpdateManyMutationInput!, where: ProjectWhereInput): BatchPayload
  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload
  updateModel(data: UpdateModelInput, id: String!): Model
  updateOneComment(data: CommentUpdateInput!, where: CommentWhereUniqueInput!): Comment!
  updateOneGroup(data: GroupUpdateInput!, where: GroupWhereUniqueInput!): Group!
  updateOnePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post!
  updateOneProject(data: ProjectUpdateInput!, where: ProjectWhereUniqueInput!): Project!
  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User!
  updatePassword(currentPassword: String!, password: String!): Boolean
  upsertOneComment(create: CommentCreateInput!, update: CommentUpdateInput!, where: CommentWhereUniqueInput!): Comment!
  upsertOneGroup(create: GroupCreateInput!, update: GroupUpdateInput!, where: GroupWhereUniqueInput!): Group!
  upsertOnePost(create: PostCreateInput!, update: PostUpdateInput!, where: PostWhereUniqueInput!): Post!
  upsertOneProject(create: ProjectCreateInput!, update: ProjectUpdateInput!, where: ProjectWhereUniqueInput!): Project!
  upsertOneUser(create: UserCreateInput!, update: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String]
  startsWith: String
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

type Post {
  author: User
  authorId: Int
  comments(cursor: CommentWhereUniqueInput, distinct: CommentDistinctFieldEnum, orderBy: CommentOrderByInput, skip: Int, take: Int, where: CommentWhereInput): [Comment!]!
  createdAt: DateTime!
  id: Int!
  published: Boolean!
  title: String!
  updatedAt: DateTime!
}

type PostAvgAggregateOutputType {
  authorId: Float
  id: Float!
}

input PostCreateInput {
  author: UserCreateOneWithoutPostsInput
  comments: CommentCreateManyWithoutPostInput
  createdAt: DateTime
  published: Boolean
  title: String!
  updatedAt: DateTime
}

input PostCreateManyWithoutAuthorInput {
  connect: [PostWhereUniqueInput]
  create: [PostCreateWithoutAuthorInput]
}

input PostCreateOneWithoutCommentsInput {
  connect: PostWhereUniqueInput
  create: PostCreateWithoutCommentsInput
}

input PostCreateWithoutAuthorInput {
  comments: CommentCreateManyWithoutPostInput
  createdAt: DateTime
  published: Boolean
  title: String!
  updatedAt: DateTime
}

input PostCreateWithoutCommentsInput {
  author: UserCreateOneWithoutPostsInput
  createdAt: DateTime
  published: Boolean
  title: String!
  updatedAt: DateTime
}

enum PostDistinctFieldEnum {
  authorId
  createdAt
  id
  published
  title
  updatedAt
}

input PostListRelationFilter {
  every: PostWhereInput
  none: PostWhereInput
  some: PostWhereInput
}

type PostMaxAggregateOutputType {
  authorId: Int
  id: Int!
}

type PostMinAggregateOutputType {
  authorId: Int
  id: Int!
}

input PostOrderByInput {
  authorId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  published: SortOrder
  title: SortOrder
  updatedAt: SortOrder
}

input PostRelationFilter {
  is: PostWhereInput
  isNot: PostWhereInput
}

input PostScalarWhereInput {
  AND: [PostScalarWhereInput]
  authorId: IntNullableFilter
  createdAt: DateTimeFilter
  id: IntFilter
  NOT: [PostScalarWhereInput]
  OR: [PostScalarWhereInput]
  published: BoolFilter
  title: StringFilter
  updatedAt: DateTimeFilter
}

type PostSumAggregateOutputType {
  authorId: Int
  id: Int!
}

input PostUpdateInput {
  author: UserUpdateOneWithoutPostsInput
  comments: CommentUpdateManyWithoutPostInput
  createdAt: DateTimeFieldUpdateOperationsInput
  published: BoolFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PostUpdateManyDataInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  published: BoolFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PostUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  published: BoolFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PostUpdateManyWithoutAuthorInput {
  connect: [PostWhereUniqueInput]
  create: [PostCreateWithoutAuthorInput]
  delete: [PostWhereUniqueInput]
  deleteMany: [PostScalarWhereInput]
  disconnect: [PostWhereUniqueInput]
  set: [PostWhereUniqueInput]
  update: [PostUpdateWithWhereUniqueWithoutAuthorInput]
  updateMany: [PostUpdateManyWithWhereNestedInput]
  upsert: [PostUpsertWithWhereUniqueWithoutAuthorInput]
}

input PostUpdateManyWithWhereNestedInput {
  data: PostUpdateManyDataInput!
  where: PostScalarWhereInput!
}

input PostUpdateOneRequiredWithoutCommentsInput {
  connect: PostWhereUniqueInput
  create: PostCreateWithoutCommentsInput
  update: PostUpdateWithoutCommentsDataInput
  upsert: PostUpsertWithoutCommentsInput
}

input PostUpdateWithoutAuthorDataInput {
  comments: CommentUpdateManyWithoutPostInput
  createdAt: DateTimeFieldUpdateOperationsInput
  published: BoolFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PostUpdateWithoutCommentsDataInput {
  author: UserUpdateOneWithoutPostsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  published: BoolFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PostUpdateWithWhereUniqueWithoutAuthorInput {
  data: PostUpdateWithoutAuthorDataInput!
  where: PostWhereUniqueInput!
}

input PostUpsertWithoutCommentsInput {
  create: PostCreateWithoutCommentsInput!
  update: PostUpdateWithoutCommentsDataInput!
}

input PostUpsertWithWhereUniqueWithoutAuthorInput {
  create: PostCreateWithoutAuthorInput!
  update: PostUpdateWithoutAuthorDataInput!
  where: PostWhereUniqueInput!
}

input PostWhereInput {
  AND: [PostWhereInput]
  author: UserWhereInput
  authorId: IntNullableFilter
  comments: CommentListRelationFilter
  createdAt: DateTimeFilter
  id: IntFilter
  NOT: [PostWhereInput]
  OR: [PostWhereInput]
  published: BoolFilter
  title: StringFilter
  updatedAt: DateTimeFilter
}

input PostWhereUniqueInput {
  id: Int
}

type Project {
  createdAt: DateTime!
  description: String!
  id: Int!
  owner: User
  ownerId: Int
  title: String!
  updatedAt: DateTime!
}

type ProjectAvgAggregateOutputType {
  id: Float!
  ownerId: Float
}

input ProjectCreateInput {
  createdAt: DateTime
  description: String!
  owner: UserCreateOneWithoutProjectInput
  title: String!
  updatedAt: DateTime
}

input ProjectCreateManyWithoutOwnerInput {
  connect: [ProjectWhereUniqueInput]
  create: [ProjectCreateWithoutOwnerInput]
}

input ProjectCreateWithoutOwnerInput {
  createdAt: DateTime
  description: String!
  title: String!
  updatedAt: DateTime
}

enum ProjectDistinctFieldEnum {
  createdAt
  description
  id
  ownerId
  title
  updatedAt
}

input ProjectListRelationFilter {
  every: ProjectWhereInput
  none: ProjectWhereInput
  some: ProjectWhereInput
}

type ProjectMaxAggregateOutputType {
  id: Int!
  ownerId: Int
}

type ProjectMinAggregateOutputType {
  id: Int!
  ownerId: Int
}

input ProjectOrderByInput {
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  ownerId: SortOrder
  title: SortOrder
  updatedAt: SortOrder
}

input ProjectScalarWhereInput {
  AND: [ProjectScalarWhereInput]
  createdAt: DateTimeFilter
  description: StringFilter
  id: IntFilter
  NOT: [ProjectScalarWhereInput]
  OR: [ProjectScalarWhereInput]
  ownerId: IntNullableFilter
  title: StringFilter
  updatedAt: DateTimeFilter
}

type ProjectSumAggregateOutputType {
  id: Int!
  ownerId: Int
}

input ProjectUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  owner: UserUpdateOneWithoutProjectInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProjectUpdateManyDataInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProjectUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProjectUpdateManyWithoutOwnerInput {
  connect: [ProjectWhereUniqueInput]
  create: [ProjectCreateWithoutOwnerInput]
  delete: [ProjectWhereUniqueInput]
  deleteMany: [ProjectScalarWhereInput]
  disconnect: [ProjectWhereUniqueInput]
  set: [ProjectWhereUniqueInput]
  update: [ProjectUpdateWithWhereUniqueWithoutOwnerInput]
  updateMany: [ProjectUpdateManyWithWhereNestedInput]
  upsert: [ProjectUpsertWithWhereUniqueWithoutOwnerInput]
}

input ProjectUpdateManyWithWhereNestedInput {
  data: ProjectUpdateManyDataInput!
  where: ProjectScalarWhereInput!
}

input ProjectUpdateWithoutOwnerDataInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProjectUpdateWithWhereUniqueWithoutOwnerInput {
  data: ProjectUpdateWithoutOwnerDataInput!
  where: ProjectWhereUniqueInput!
}

input ProjectUpsertWithWhereUniqueWithoutOwnerInput {
  create: ProjectCreateWithoutOwnerInput!
  update: ProjectUpdateWithoutOwnerDataInput!
  where: ProjectWhereUniqueInput!
}

input ProjectWhereInput {
  AND: [ProjectWhereInput]
  createdAt: DateTimeFilter
  description: StringFilter
  id: IntFilter
  NOT: [ProjectWhereInput]
  OR: [ProjectWhereInput]
  owner: UserWhereInput
  ownerId: IntNullableFilter
  title: StringFilter
  updatedAt: DateTimeFilter
}

input ProjectWhereUniqueInput {
  id: Int
}

type Query {
  aggregateComment(cursor: CommentWhereUniqueInput, distinct: CommentDistinctFieldEnum, orderBy: [CommentOrderByInput], skip: Int, take: Int, where: CommentWhereInput): AggregateComment
  aggregateGroup(cursor: GroupWhereUniqueInput, distinct: GroupDistinctFieldEnum, orderBy: [GroupOrderByInput], skip: Int, take: Int, where: GroupWhereInput): AggregateGroup
  aggregatePost(cursor: PostWhereUniqueInput, distinct: PostDistinctFieldEnum, orderBy: [PostOrderByInput], skip: Int, take: Int, where: PostWhereInput): AggregatePost
  aggregateProject(cursor: ProjectWhereUniqueInput, distinct: ProjectDistinctFieldEnum, orderBy: [ProjectOrderByInput], skip: Int, take: Int, where: ProjectWhereInput): AggregateProject
  aggregateUser(cursor: UserWhereUniqueInput, distinct: UserDistinctFieldEnum, orderBy: [UserOrderByInput], skip: Int, take: Int, where: UserWhereInput): AggregateUser
  findFirstComment(cursor: CommentWhereUniqueInput, distinct: CommentDistinctFieldEnum, orderBy: [CommentOrderByInput], skip: Int, take: Int, where: CommentWhereInput): [Comment]
  findFirstGroup(cursor: GroupWhereUniqueInput, distinct: GroupDistinctFieldEnum, orderBy: [GroupOrderByInput], skip: Int, take: Int, where: GroupWhereInput): [Group]
  findFirstPost(cursor: PostWhereUniqueInput, distinct: PostDistinctFieldEnum, orderBy: [PostOrderByInput], skip: Int, take: Int, where: PostWhereInput): [Post]
  findFirstProject(cursor: ProjectWhereUniqueInput, distinct: ProjectDistinctFieldEnum, orderBy: [ProjectOrderByInput], skip: Int, take: Int, where: ProjectWhereInput): [Project]
  findFirstUser(cursor: UserWhereUniqueInput, distinct: UserDistinctFieldEnum, orderBy: [UserOrderByInput], skip: Int, take: Int, where: UserWhereInput): [User]
  findManyComment(cursor: CommentWhereUniqueInput, distinct: CommentDistinctFieldEnum, orderBy: [CommentOrderByInput], skip: Int, take: Int, where: CommentWhereInput): [Comment]
  findManyCommentCount(cursor: CommentWhereUniqueInput, distinct: CommentDistinctFieldEnum, orderBy: [CommentOrderByInput], skip: Int, take: Int, where: CommentWhereInput): Int
  findManyGroup(cursor: GroupWhereUniqueInput, distinct: GroupDistinctFieldEnum, orderBy: [GroupOrderByInput], skip: Int, take: Int, where: GroupWhereInput): [Group]
  findManyGroupCount(cursor: GroupWhereUniqueInput, distinct: GroupDistinctFieldEnum, orderBy: [GroupOrderByInput], skip: Int, take: Int, where: GroupWhereInput): Int
  findManyPost(cursor: PostWhereUniqueInput, distinct: PostDistinctFieldEnum, orderBy: [PostOrderByInput], skip: Int, take: Int, where: PostWhereInput): [Post]
  findManyPostCount(cursor: PostWhereUniqueInput, distinct: PostDistinctFieldEnum, orderBy: [PostOrderByInput], skip: Int, take: Int, where: PostWhereInput): Int
  findManyProject(cursor: ProjectWhereUniqueInput, distinct: ProjectDistinctFieldEnum, orderBy: [ProjectOrderByInput], skip: Int, take: Int, where: ProjectWhereInput): [Project]
  findManyProjectCount(cursor: ProjectWhereUniqueInput, distinct: ProjectDistinctFieldEnum, orderBy: [ProjectOrderByInput], skip: Int, take: Int, where: ProjectWhereInput): Int
  findManyUser(cursor: UserWhereUniqueInput, distinct: UserDistinctFieldEnum, orderBy: [UserOrderByInput], skip: Int, take: Int, where: UserWhereInput): [User]
  findManyUserCount(cursor: UserWhereUniqueInput, distinct: UserDistinctFieldEnum, orderBy: [UserOrderByInput], skip: Int, take: Int, where: UserWhereInput): Int
  findOneComment(where: CommentWhereUniqueInput!): Comment
  findOneGroup(where: GroupWhereUniqueInput!): Group
  findOnePost(where: PostWhereUniqueInput!): Post
  findOneProject(where: ProjectWhereUniqueInput!): Project
  findOneUser(where: UserWhereUniqueInput!): User
  getSchema: Schema
  me: User
  uploads: [Project]
}

type Schema {
  enums: [Enum]
  models: [Model]
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String]
  startsWith: String
}

input UpdateFieldInput {
  create: Boolean
  editor: Boolean
  filter: Boolean
  id: String
  isId: Boolean
  kind: KindEnum
  list: Boolean
  name: String
  order: Int
  read: Boolean
  relationField: Boolean
  required: Boolean
  sort: Boolean
  title: String
  type: String
  unique: Boolean
  update: Boolean
  upload: Boolean
}

input UpdateModelInput {
  create: Boolean
  delete: Boolean
  displayFields: [String]
  fields: [UpdateFieldInput]
  idField: String
  name: String
  update: Boolean
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadFile {
  filename: String
  uri: String
}

type User {
  comments(cursor: CommentWhereUniqueInput, distinct: CommentDistinctFieldEnum, orderBy: CommentOrderByInput, skip: Int, take: Int, where: CommentWhereInput): [Comment!]!
  createdAt: DateTime!
  email: String!
  group: Group
  groupId: Int
  id: Int!
  name: String
  password: String!
  posts(cursor: PostWhereUniqueInput, distinct: PostDistinctFieldEnum, orderBy: PostOrderByInput, skip: Int, take: Int, where: PostWhereInput): [Post!]!
  Project(cursor: ProjectWhereUniqueInput, distinct: ProjectDistinctFieldEnum, orderBy: ProjectOrderByInput, skip: Int, take: Int, where: ProjectWhereInput): [Project!]!
}

type UserAvgAggregateOutputType {
  groupId: Float
  id: Float!
}

input UserCreateInput {
  comments: CommentCreateManyWithoutAuthorInput
  createdAt: DateTime
  email: String!
  group: GroupCreateOneWithoutUsersInput
  name: String
  password: String!
  posts: PostCreateManyWithoutAuthorInput
  Project: ProjectCreateManyWithoutOwnerInput
}

input UserCreateManyWithoutGroupInput {
  connect: [UserWhereUniqueInput]
  create: [UserCreateWithoutGroupInput]
}

input UserCreateOneWithoutCommentsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutCommentsInput
}

input UserCreateOneWithoutPostsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutPostsInput
}

input UserCreateOneWithoutProjectInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutProjectInput
}

input UserCreateWithoutCommentsInput {
  createdAt: DateTime
  email: String!
  group: GroupCreateOneWithoutUsersInput
  name: String
  password: String!
  posts: PostCreateManyWithoutAuthorInput
  Project: ProjectCreateManyWithoutOwnerInput
}

input UserCreateWithoutGroupInput {
  comments: CommentCreateManyWithoutAuthorInput
  createdAt: DateTime
  email: String!
  name: String
  password: String!
  posts: PostCreateManyWithoutAuthorInput
  Project: ProjectCreateManyWithoutOwnerInput
}

input UserCreateWithoutPostsInput {
  comments: CommentCreateManyWithoutAuthorInput
  createdAt: DateTime
  email: String!
  group: GroupCreateOneWithoutUsersInput
  name: String
  password: String!
  Project: ProjectCreateManyWithoutOwnerInput
}

input UserCreateWithoutProjectInput {
  comments: CommentCreateManyWithoutAuthorInput
  createdAt: DateTime
  email: String!
  group: GroupCreateOneWithoutUsersInput
  name: String
  password: String!
  posts: PostCreateManyWithoutAuthorInput
}

enum UserDistinctFieldEnum {
  createdAt
  email
  groupId
  id
  name
  password
}

input UserListRelationFilter {
  every: UserWhereInput
  none: UserWhereInput
  some: UserWhereInput
}

type UserMaxAggregateOutputType {
  groupId: Int
  id: Int!
}

type UserMinAggregateOutputType {
  groupId: Int
  id: Int!
}

input UserOrderByInput {
  createdAt: SortOrder
  email: SortOrder
  groupId: SortOrder
  id: SortOrder
  name: SortOrder
  password: SortOrder
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

input UserScalarWhereInput {
  AND: [UserScalarWhereInput]
  createdAt: DateTimeFilter
  email: StringFilter
  groupId: IntNullableFilter
  id: IntFilter
  name: StringNullableFilter
  NOT: [UserScalarWhereInput]
  OR: [UserScalarWhereInput]
  password: StringFilter
}

type UserSumAggregateOutputType {
  groupId: Int
  id: Int!
}

input UserUpdateInput {
  comments: CommentUpdateManyWithoutAuthorInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  group: GroupUpdateOneWithoutUsersInput
  name: NullableStringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  posts: PostUpdateManyWithoutAuthorInput
  Project: ProjectUpdateManyWithoutOwnerInput
}

input UserUpdateManyDataInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
}

input UserUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
}

input UserUpdateManyWithoutGroupInput {
  connect: [UserWhereUniqueInput]
  create: [UserCreateWithoutGroupInput]
  delete: [UserWhereUniqueInput]
  deleteMany: [UserScalarWhereInput]
  disconnect: [UserWhereUniqueInput]
  set: [UserWhereUniqueInput]
  update: [UserUpdateWithWhereUniqueWithoutGroupInput]
  updateMany: [UserUpdateManyWithWhereNestedInput]
  upsert: [UserUpsertWithWhereUniqueWithoutGroupInput]
}

input UserUpdateManyWithWhereNestedInput {
  data: UserUpdateManyDataInput!
  where: UserScalarWhereInput!
}

input UserUpdateOneWithoutCommentsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutCommentsInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutCommentsDataInput
  upsert: UserUpsertWithoutCommentsInput
}

input UserUpdateOneWithoutPostsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutPostsInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutPostsDataInput
  upsert: UserUpsertWithoutPostsInput
}

input UserUpdateOneWithoutProjectInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutProjectInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutProjectDataInput
  upsert: UserUpsertWithoutProjectInput
}

input UserUpdateWithoutCommentsDataInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  group: GroupUpdateOneWithoutUsersInput
  name: NullableStringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  posts: PostUpdateManyWithoutAuthorInput
  Project: ProjectUpdateManyWithoutOwnerInput
}

input UserUpdateWithoutGroupDataInput {
  comments: CommentUpdateManyWithoutAuthorInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  posts: PostUpdateManyWithoutAuthorInput
  Project: ProjectUpdateManyWithoutOwnerInput
}

input UserUpdateWithoutPostsDataInput {
  comments: CommentUpdateManyWithoutAuthorInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  group: GroupUpdateOneWithoutUsersInput
  name: NullableStringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  Project: ProjectUpdateManyWithoutOwnerInput
}

input UserUpdateWithoutProjectDataInput {
  comments: CommentUpdateManyWithoutAuthorInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  group: GroupUpdateOneWithoutUsersInput
  name: NullableStringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  posts: PostUpdateManyWithoutAuthorInput
}

input UserUpdateWithWhereUniqueWithoutGroupInput {
  data: UserUpdateWithoutGroupDataInput!
  where: UserWhereUniqueInput!
}

input UserUpsertWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput!
  update: UserUpdateWithoutCommentsDataInput!
}

input UserUpsertWithoutPostsInput {
  create: UserCreateWithoutPostsInput!
  update: UserUpdateWithoutPostsDataInput!
}

input UserUpsertWithoutProjectInput {
  create: UserCreateWithoutProjectInput!
  update: UserUpdateWithoutProjectDataInput!
}

input UserUpsertWithWhereUniqueWithoutGroupInput {
  create: UserCreateWithoutGroupInput!
  update: UserUpdateWithoutGroupDataInput!
  where: UserWhereUniqueInput!
}

input UserWhereInput {
  AND: [UserWhereInput]
  comments: CommentListRelationFilter
  createdAt: DateTimeFilter
  email: StringFilter
  group: GroupWhereInput
  groupId: IntNullableFilter
  id: IntFilter
  name: StringNullableFilter
  NOT: [UserWhereInput]
  OR: [UserWhereInput]
  password: StringFilter
  posts: PostListRelationFilter
  Project: ProjectListRelationFilter
}

input UserWhereUniqueInput {
  email: String
  id: Int
}
